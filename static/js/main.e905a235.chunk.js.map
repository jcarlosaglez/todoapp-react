{"version":3,"sources":["components/Header.js","components/Form.js","components/Checkmark.js","components/Todo.js","components/TodoList.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","count","countFinished","prototypes","PropTypes","number","isRequired","Form","state","value","changeValue","e","setState","target","buttonSubmit","preventDefault","newTask","trim","addTask","alert","onSubmit","this","type","placeholder","onChange","React","Component","Checkmark","onClick","toggleTask","index","isCompleted","Todo","title","removeTask","TodoList","todos","map","i","done","App","copyState","updateFinishedTasks","splice","tasks","find","toLowerCase","push","finishedTasks","filter","task","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e905a235.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/Header.css\"\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Header = (props) =>\r\n    <div className=\"card-header\">\r\n        <h1 className=\"card-header-title header\">\r\n            Hay {props.count} tareas\r\n        </h1>\r\n        <p>{props.countFinished} de {props.count} completadas</p>\r\n    </div>\r\n\r\nHeader.prototypes = {\r\n    count: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../css/Form.css\";\r\n\r\nclass Form extends React.Component {\r\n    state = { value: '' }\r\n\r\n    changeValue = (e) => {\r\n        this.setState({ value: e.target.value });\r\n    }\r\n\r\n    buttonSubmit = (e) => {\r\n        e.preventDefault();\r\n        const newTask = this.state.value.trim();\r\n        if(newTask !== \"\") {\r\n            if(this.props.addTask(newTask)) {\r\n                this.setState({ value: '' });\r\n            }\r\n        }\r\n        else{\r\n            alert(\"No escribio nada.\");\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (  \r\n            <form className=\"form\" onSubmit={this.buttonSubmit}>\r\n                <input type=\"text\"\r\n                    className=\"input\"\r\n                    placeholder=\"Agrega una tarea...\"\r\n                    onChange={this.changeValue}\r\n                    value={this.state.value}\r\n                />\r\n                <button className=\"button\">Guardar</button>     \r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nForm.propTypes = {\r\n    addTask: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"../css/CheckMark.css\"\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Checkmark extends React.Component{\r\n    render() {\r\n        return (  \r\n            <span onClick={(e) => this.props.toggleTask(e, this.props.index)}>{`${this.props.isCompleted ? \":)\" : \":(\"}`}</span>\r\n        )\r\n    }\r\n}\r\n\r\nCheckmark.propTypes = {\r\n    isCompleted: PropTypes.bool\r\n}\r\n\r\nexport default Checkmark;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Checkmark from \"./Checkmark\";\r\nimport \"../css/Todo.css\";\r\n\r\nclass Todo extends React.Component{\r\n    /* constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isCompleted: this.props.isCompleted,\r\n            title: this.props.title,\r\n            index: this.props.index\r\n        }\r\n    } */\r\n\r\n    render() {\r\n        return (  \r\n            <div className=\"list-item\">\r\n                {/* <input type=\"checkbox\" name=\"completed\" checked={this.state.isCompleted} onChange={this.toggle} id=\"\"/> */}\r\n                <p className={`task ${this.props.isCompleted ? 'done' : ''}`}>\r\n                    {this.props.title}\r\n                </p>\r\n                <Checkmark\r\n                    toggleTask={this.props.toggleTask}\r\n                    isCompleted={this.props.isCompleted}\r\n                    index={this.props.index}\r\n                />\r\n                <button className=\"delete\" onClick={(e) => this.props.removeTask(e, this.props.index)}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    /* removeTask = (e) => {\r\n        e.target.parentNode.parentNode.removeChild(e.target.parentNode);\r\n    } */\r\n\r\n    /* toggle = (e) => {\r\n        this.setState({\r\n            isCompleted: !this.state.isCompleted\r\n        })\r\n    } */\r\n}\r\n\r\nTodo.propTypes = {\r\n    isCompleted: PropTypes.bool.isRequired,\r\n    index: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired\r\n    // isCompleted: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default Todo;","import React from \"react\";\r\nimport \"../css/TodoList.css\";\r\nimport Todo from \"./Todo\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction TodoList(props) {\r\n    return (\r\n        <div className=\"list-wrapper\">\r\n            {/* <Todo isCompleted={true} otraPropiedad={{pro1: \"jsjs\", prop2: true}}/>\r\n            <Todo/>\r\n            <Todo isCompleted={true}/>\r\n            <Todo/>\r\n            <Todo/>\r\n            <Todo isCompleted={true}/>\r\n            <Todo/>\r\n            <Todo/>\r\n            <Todo/>\r\n            <Todo/> */}\r\n            {\r\n                props.todos.map((e, i) => \r\n                    <Todo\r\n                        toggleTask={props.toggleTask}\r\n                        removeTask={props.removeTask}\r\n                        key={i}\r\n                        index={i}\r\n                        title={e.title}\r\n                        isCompleted={e.done}\r\n                    />)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n/* class TodoList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            tasks: [1,2,3,4,5,6,7,8,9,0]\r\n        }\r\n    }\r\n\r\n    state = {\r\n        tasks: [1,2,3,4,5,6,7,8,9,0]\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"list-wrapper\">\r\n                {this.state.tasks.map(() => <Todo />)}\r\n            </div>\r\n        )\r\n    }\r\n} */\r\n\r\n/* TodoList.defaultProps = {\r\n    todos: []\r\n} */\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf( \r\n        PropTypes.shape({\r\n            title: PropTypes.string.isRequired,\r\n            done: PropTypes.bool.isRequired\r\n        })\r\n    ).isRequired\r\n}\r\n\r\nexport default TodoList;","import React from \"react\";\r\nimport \"../css/App.css\";\r\nimport Header from \"./Header\";\r\nimport Form from \"./Form\";\r\nimport TodoList from \"./TodoList\";\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        todos: [\r\n            {title: \"Tarea 1\", done: true},\r\n            {title: \"Tarea 2\", done: false},\r\n            {title: \"Tarea 3\", done: true},\r\n            {title: \"Tarea 4\", done: false},\r\n            {title: \"Tarea 5\", done: true},\r\n        ],\r\n        countFinished: 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        /* const copyState = [...this.state.todos];\r\n\r\n        const len = copyState.length - 1;\r\n        copyState[len].done = !copyState[len].done;\r\n\r\n        this.setState({todos: copyState}) */\r\n        this.updateFinishedTasks();\r\n    }\r\n\r\n    /* handleClick = e => {\r\n        this.setState({\r\n            todos: [\r\n                {title: \"Tarea 1\", done: true},\r\n                {title: \"Tarea 2\", done: false},\r\n                {title: \"Tarea 3\", done: true},\r\n                {title: \"Tarea 4\", done: false},\r\n                {title: \"Tarea 5\", done: true},\r\n            ]\r\n        });\r\n    } */\r\n\r\n    toggleTask = (e, index) => {\r\n        const copyState = [...this.state.todos];\r\n        // console.log(copyState[index]);\r\n\r\n        copyState[index].done = !copyState[index].done;\r\n        // console.log(copyState[index]);\r\n\r\n        this.setState({todos: copyState}, () => this.updateFinishedTasks());\r\n    }\r\n\r\n    removeTask = (e, index) => {\r\n        let copyState = [...this.state.todos];\r\n        // console.log(copyState[index]);\r\n\r\n        copyState.splice(index, 1);\r\n        // console.log(copyState[index]);\r\n\r\n        // console.log(copyState)\r\n        this.setState({todos: copyState}, () => this.updateFinishedTasks());\r\n        \r\n    }\r\n\r\n    addTask = (e) => {\r\n        let tasks = [...this.state.todos];\r\n        // Lo que reciba addTask se guarda en title\r\n        let title = e;\r\n        \r\n        const exist = tasks.find(e => title.toLowerCase() === e.title.toLowerCase());\r\n\r\n        if (exist) {\r\n            alert(`La tarea \"${title}\" se encuentra dentro de las tareas por hacer!`);\r\n\r\n            return false;\r\n        }\r\n\r\n        tasks.push({ title, done: false });\r\n    \r\n        this.setState({\r\n            todos: tasks\r\n        }, () => this.updateFinishedTasks());\r\n\r\n        return true;\r\n    }\r\n\r\n    updateFinishedTasks = () => {\r\n        const finishedTasks = this.state.todos.filter(task => task.done === true);\r\n        this.setState({countFinished: finishedTasks.length});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"card frame\">\r\n                    <Header\r\n                        count={this.state.todos.length}\r\n                        countFinished={this.state.countFinished}\r\n                    />\r\n                    <TodoList\r\n                        toggleTask={this.toggleTask}\r\n                        removeTask={this.removeTask}\r\n                        todos={this.state.todos}\r\n                    />\r\n                    {/* <button onClick={this.handleClick}>Inicializar</button> */}\r\n                    <Form addTask={this.addTask} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}